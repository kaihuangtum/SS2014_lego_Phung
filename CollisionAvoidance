/* Wir betrachten zwei Fälle

1. Fall Kollisionsdaten von Jens <- Objekt abgeschnitten. 
Falls Kollisionspunkt kleiner als Eckpunkte
	
2. Falls Kollisionspunkt größer als Eckpunkte 
*/

package Test // from Jens code

public class CollisionAvoidance {
/* This function gets the outer points of the objects. We receive an array with the coordinate of the object which can be seen by the car.
size of the objectarray  n = "defined size", -> int objectarray [n] [2] (i.e. the coordinate (4/7) in objectarray [0] -> objectarray [0] [0] = 4,
obectarray [0] [1] = 7
*/

	static int[][] objectarray = new int[1000][2];


	public static void main(String[] args) {

		for(int i = 0; i < objectarray.length; i++){
				objectarray[i][0] = (int) Math. * 10;
				objectarray[i][1] = (int) Math.random() * 10;
				objectarray[399][0] = 1;
				objectarray[399][1] = 7;
				objectarray[12] [0] = 10;
				objectarray[12] [1] = 0;
				System.out.println(objectarray[i][0]+"/"+objectarray[i][1] + ";");
		}
		
		
		int [][] temp = getMax_Max(objectarray);
		int [][] temp2 = getMax_Min(objectarray);
		int [][] temp3 = getMin_Max(objectarray);
		int [][] temp4 = getMin_Min(objectarray);
		for(int i = 0; i < temp.length;i++){
		System.out.println("maxmax"+temp[i][0] +"+" +temp[i][1]);
		System.out.println("maxmin"+temp2[i][0]+"+"+temp2[i][1]);
		System.out.println("minmax"+temp3[i][0]+"+"+temp3[i][1]);
		System.out.println("minmin"+temp4[i][0]+"+"+temp4[i][1]);
		}
		
	}
	//maxy_maxx
	public static int[][] getMax_Max(int[][] objectarray) {
	int[][] result = new int[1][2];
	int max_x = 0;
	int max_y = 0;
	for (int i = 0; i < objectarray.length; i++) {
		if (max_y == objectarray[i][1]) {
			if (objectarray[i][0] > max_x) {
				max_x = objectarray[i][0];
				result[0][0] = max_x;
				result[0][1] = max_y;
			}
		}
		if (objectarray[i][1] > max_y) {
			max_x = objectarray[i][0];
			max_y = objectarray[i][1];
			result[0][0] = max_x;
			result[0][1] = max_y;
		}
	}
	return result;
}

	//maxy_minx
	public static int[][] getMax_Min(int[][] objectarray) {
	int[][] result = new int[1][2];
	int min_x = 9999;
	int max_y = 0;
	for (int i = 0; i < objectarray.length; i++) {
		if (max_y == objectarray[i][1]) {
			if (objectarray[i][0] < min_x) {
				min_x = objectarray[i][0];
				result[0][0] = min_x;
				result[0][1] = max_y;
			}
		}
		if (objectarray[i][1] > max_y) {
			min_x = objectarray[i][0];
			max_y = objectarray[i][1];
			result[0][0] = min_x;
			result[0][1] = max_y;
		}
	}
	return result;
}
	//miny_maxx
	public static int[][] getMin_Max(int[][] objectarray) {
	int[][] result = new int[1][2];
	int min_y = 9999;
	int max_x = 0;
	for (int i = 0; i < objectarray.length; i++) {
		if (min_y == objectarray[i][1]) {
			if (objectarray[i][0] > max_x) {
				max_x = objectarray[i][0];
				result[0][0] = max_x;
				result[0][1] = min_y;
			}
		}
		if (objectarray[i][1] < min_y) {
			max_x = objectarray[i][0];
			min_y = objectarray[i][1];
			result[0][0] = max_x;
			result[0][1] = min_y;
		}
	}
	return result;
}
	//miny_minx
	public static int[][] getMin_Min(int[][] objectarray) {
	int[][] result = new int[1][2];
	int min_y = 9999;
	int min_x = 9999;
	for (int i = 0; i < objectarray.length; i++) {
		if (min_y == objectarray[i][1]) {
			if (objectarray[i][0] < min_x) {
				min_x = objectarray[i][0];
				result[0][0] = min_x;
				result[0][1] = min_y;
			}
		}
		if (objectarray[i][1] < min_y) {
			min_x = objectarray[i][0];
			min_y = objectarray[i][1];
			result[0][0] = min_x;
			result[0][1] = min_y;
		}
	}
	return result;
}

	public static int[][] getOuterPoints(int[][] objectarray, int compass_input) {
		int[][] outerPoints = new int[1][2];
		int angle = 45; //angleCheck(compass_input);
		// case 1 >0 to <90 degrees
		if (angle > 0 && angle < 90) {
			// first point
			outerPoints = getMin_Max(objectarray);

			// other point
			outerPoints = getMax_Min(objectarray);
			
		}
		// case 2 >90 to <180 degrees
		else if (angle > 90 && angle < 180) {
			// first point
			outerPoints = getMax_Max(objectarray);

			// other point
			outerPoints = getMin_Min(objectarray);

		}
		// case 3 <0 to >-90 degrees
		else if (angle < 0 && angle > (-90)) {
			// first point
			outerPoints = getMax_Min(objectarray);

			// other point
			outerPoints = getMin_Max(objectarray);

		}
		// case 4 <-90 to >-180 degrees
		else if (angle < (-90) && angle > (-180)) {
			// first point
			outerPoints = getMax_Max(objectarray);

			// other point
			outerPoints = getMin_Min(objectarray);

		}
		// case 5 0 degrees
		else if (angle == 0) {
			// first point
			outerPoints = getMin_Min(objectarray);

			// other point
			outerPoints = getMin_Max(objectarray);

		}
		// case 6 90 degrees
		else if (angle == 90) {
			// first point
			outerPoints = getMin_Min(objectarray);

			// other point
			outerPoints = getMax_Min(objectarray);
	
		}
		// case 7 +-180 degrees
		else if (angle == 180 || angle == (-180)) {
			// first point
			outerPoints = getMax_Min(objectarray);

			// other point
			outerPoints = getMax_Max(objectarray);

		}
		// case 8 -90 degrees
		else if (angle == (-90)) {
			// first point
			outerPoints = getMin_Max(objectarray);

			// other point
			outerPoints = getMax_Max(objectarray);

		}

		return outerPoints;
	}

}

//Returns the points where the car could drive to

public int[][] getNextPoint(){
	int[][] avoidancepoints = getOuterPoints(objectarray,car_x,car_y);
	//which value to add?
	//1st point +2 or -2 or 2nd point?
	avoidancepoints[0][1]+=2; 
	avoidancepoints[1][1]-=2;
	return avoidancepoints;
}

//Chooses one point to drive to

public void changePath(){
	int[][] avPoints = getNextPoint();
	car_x = avPoints[1][0];
	car_y = avPoints[1][1];
}


}
