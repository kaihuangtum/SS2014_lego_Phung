/* Wir betrachten zwei Fälle

1. Fall Kollisionsdaten von Jens <- Objekt abgeschnitten. 
Falls Kollisionspunkt kleiner als Eckpunkte
	
2. Falls Kollisionspunkt größer als Eckpunkte 
*/

package Test // from Jens code

public class CollisionAvoidance {
/* This function gets the outer points of the objects. We receive an array with the coordinate of the object which can be seen by the car.
size of the objectarray  n = "defined size", -> int objectarray [n] [2] (i.e. the coordinate (4/7) in objectarray [0] -> objectarray [0] [0] = 4,
obectarray [0] [1] = 7
*/

//A better idea is maybe to calculate it with sin and cos.
//compass_input noch nicht vorhanden!
public static int[][] getOuterPoints(int[][] objectarray, int compass_input) {
		int[][] outerPoints = new int[1][2];
		return outerPoints;
	}

	public static int getMax_x(int[][] objectarray) {
		int max_x = 0;
		int rel_y;
		for (int i = 0; i < objectarray.length; i++) {
			if (objectarray[i][0] > max_x) {
				max_x = objectarray[i][0];
				rel_y = objectarray[i][1];
			}
		}
		return max_x;
	}

	public static int getMax_y(int[][] objectarray) {
		int max_y = 0;
		for (int i = 0; i < objectarray.length; i++) {
			if (objectarray[i][1] > max_y) {
				max_y = objectarray[i][1];
			}
		}
		return max_y;
	}

	public static int getMin_x(int[][] objectarray) {
		int min_x = 9999;
		for (int i = 0; i < objectarray.length; i++) {
			if (objectarray[i][0] < min_x) {
				min_x = objectarray[i][0];
			}
		}
		return min_x;
	}
	
	public static int getMin_y(int[] [] objectarray){
		int min_y = 9999;
		for (int i = 0; i < objectarray.length; i++){
			if (objectarray[i][1] < min_y){
				min_y = objectarray[i][1];
			}
		}
		return min_y;
	}
//Returns the points where the car could drive to

public int[][] getNextPoint(){
	int[][] avoidancepoints = getOuterPoints(objectarray,car_x,car_y);
	//which value to add?
	//1st point +2 or -2 or 2nd point?
	avoidancepoints[0][1]+=2; 
	avoidancepoints[1][1]-=2;
	return avoidancepoints;
}

//Chooses one point to drive to

public void changePath(){
	int[][] avPoints = getNextPoint();
	car_x = avPoints[1][0];
	car_y = avPoints[1][1];
}


}
