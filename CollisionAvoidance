/* Wir betrachten zwei Fälle

1. Fall Kollisionsdaten von Jens <- Objekt abgeschnitten. 
Falls Kollisionspunkt kleiner als Eckpunkte
	
2. Falls Kollisionspunkt größer als Eckpunkte 
*/

package Test // from Jens code

public class CollisionAvoidance {
/* This function gets the outer points of the objects. We receive an array with the coordinate of the object which can be seen by the car.
size of the objectarray  n = "defined size", -> int objectarray [n] [2] (i.e. the coordinate (4/7) in objectarray [0] -> objectarray [0] [0] = 4,
obectarray [0] [1] = 7
*/

//A better idea is maybe to calculate it with sin and cos.
//compass_input noch nicht vorhanden!
public static int[][] getOuterPoints(int[][] objectarray, int compass_input) {
		int[][] outerPoints = new int[1][2];
		int angle = angleCheck(compass_input);
		// case 1 >0 to <90 degrees
		if (angle > 0 && angle < 90) {
			// first point
			outerPoints[0][0] = miny_maxx[0][0];
			outerPoints[0][1] = miny_maxx[0][1];
			// other point
			outerPoints[1][0] = maxy_minx[1][0];
			outerPoints[1][1] = maxy_minx[1][1];
		}
		// case 2 >90 to <180 degrees
		else if (angle > 90 && angle < 180) {
			// first point
			outerPoints[0][0] = maxy_maxx[0][0];
			outerPoints[0][1] = maxy_maxx[0][1];
			// other point
			outerPoints[1][0] = miny_minx[1][0];
			outerPoints[1][1] = miny_minx[1][1];
		}
		// case 3 <0 to >-90 degrees
		else if (angle < 0 && angle > (-90)) {
			// first point
			outerPoints[0][0] = maxy_minx[0][0];
			outerPoints[0][1] = maxy_minx[0][1];
			// other point
			outerPoints[1][0] = miny_maxx[1][0];
			outerPoints[1][1] = miny_maxx[1][1];
		}
		// case 4 <-90 to >-180 degrees
		else if (angle < (-90) && angle > (-180)) {
			// first point
			outerPoints[0][0] = maxy_maxx[0][0];
			outerPoints[0][1] = maxy_maxx[0][1];
			// other point
			outerPoints[1][0] = miny_minx[1][0];
			outerPoints[1][1] = miny_minx[1][1];
		}
		// case 5 0 degrees
		else if (angle == 0) {
			// first point
			outerPoints[0][0] = miny_minx[0][0];
			outerPoints[0][1] = miny_minx[0][1];
			// other point
			outerPoints[1][0] = miny_maxx[1][0];
			outerPoints[1][1] = miny_maxx[1][1];
		}
		// case 6 90 degrees
		else if (angle == 90) {
			// first point
			outerPoints[0][0] = miny_minx[0][0];
			outerPoints[0][1] = miny_minx[0][1];
			// other point
			outerPoints[1][0] = maxy_minx[1][0];
			outerPoints[1][1] = maxy_minx[1][1];
		}
		// case 7 +-180 degrees
		else if (angle == 180 || angle == (-180)) {
			// first point
			outerPoints[0][0] = maxy_minx[0][0];
			outerPoints[0][1] = maxy_minx[0][1];
			// other point
			outerPoints[1][0] = maxy_maxx[1][0];
			outerPoints[1][1] = maxy_maxx[1][1];
		}
		// case 8 -90 degrees
		else if (angle == (-90)) {
			// first point
			outerPoints[0][0] = miny_maxx[0][0];
			outerPoints[0][1] = miny_maxx[0][1];
			// other point
			outerPoints[1][0] = maxy_maxx[1][0];
			outerPoints[1][1] = maxy_maxx[1][1];
		}

		return outerPoints;
	}

		public static int[][] getMax_Max(int[][] objectarray) {
		int[][] result = new int[1][2];
		int max_x = 0;
		int max_y = 0;
		for (int i = 0; i < objectarray.length; i++) {
			if (max_y == objectarray[i][1]) {
				if (objectarray[i][0] > max_x) {
					max_x = objectarray[i][0];
					result[0][0] = max_x;
					result[0][1] = max_y;
				}
			}
			if (objectarray[i][1] > max_y) {
				max_x = objectarray[i][0];
				max_y = objectarray[i][1];
				result[0][0] = max_x;
				result[0][1] = max_y;
			}
		}
		return result;
	}

/*	public static int[][] getMax_Min(int[][] objectarray) {
		int[][] result = new int[1][2];
		int max_x = 0;
		int min_y = 9999;
		for (int i = 0; i < objectarray.length; i++) {
			if (max_x == objectarray[i][0]) {
				if (objectarray[i][1] < min_y) {
					min_y = objectarray[i][1];
					result[0][0] = max_x;
					result[0][1] = min_y;
				}
			}
			if (objectarray[i][0] > max_x) {
				max_x = objectarray[i][0];
				min_y = objectarray[i][1];
				result[0][0] = max_x;
				result[0][1] = min_y;
			}
		}
		return result;
	}*/

	public static int getMin_x(int[][] objectarray) {
		int min_x = 9999;
		int rel_y;
		for (int i = 0; i < objectarray.length; i++) {
			if (objectarray[i][0] < min_x) {
				min_x = objectarray[i][0];
				rel_y = objectarray[i][1];
			}
		}
		return min_x;
	}

	public static int getMin_y(int[][] objectarray) {
		int min_y = 9999;
		int rel_x;
		for (int i = 0; i < objectarray.length; i++) {
			if (objectarray[i][1] < min_y) {
				min_y = objectarray[i][1];
				rel_x = objectarray[i][0];
			}
		}
		return min_y;
	}
//Returns the points where the car could drive to

public int[][] getNextPoint(){
	int[][] avoidancepoints = getOuterPoints(objectarray,car_x,car_y);
	//which value to add?
	//1st point +2 or -2 or 2nd point?
	avoidancepoints[0][1]+=2; 
	avoidancepoints[1][1]-=2;
	return avoidancepoints;
}

//Chooses one point to drive to

public void changePath(){
	int[][] avPoints = getNextPoint();
	car_x = avPoints[1][0];
	car_y = avPoints[1][1];
}


}
