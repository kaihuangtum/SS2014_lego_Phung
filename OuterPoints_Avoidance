package OuterPoints;

import Navigation.Navigations;

public class Test {

	static int[][] objectarray = new int[1000][2];
	static double newTarget1_x;
	static double newTarget1_y;
	static double newTarget2_x;
	static double newTarget2_y;

	static double tempGoal_x;
	static double tempGoal_y;

	// Getter
	public static double getXofTarget1() {
		return newTarget1_x;
	}

	public static double getYofTarget1() {
		return newTarget1_y;
	}

	public static double getXofTarget2() {
		return newTarget2_x;
	}

	public static double getYofTarget2() {
		return newTarget2_y;
	}

	public static void main(String[] args) {

		for (int i = 0; i < objectarray.length; i++) {
			objectarray[i][0] = 1 + (int) Math.random() * 10;
			objectarray[i][1] = 1 + (int) Math.random() * 10;
			objectarray[399][0] = 1;
			objectarray[399][1] = 7;
			objectarray[12][0] = 0;
			objectarray[12][1] = 2999;
			System.out.println(objectarray[i][0] + "/" + objectarray[i][1]
					+ ";");
		}

		int[][] temp = getMax_Max(objectarray);
		int[][] temp2 = getMax_Min(objectarray);
		int[][] temp3 = getMin_Max(objectarray);
		int[][] temp4 = getMin_Min(objectarray);
		for (int i = 0; i < temp.length; i++) {
			System.out.println("maxmax" + temp[i][0] + "+" + temp[i][1]);
			System.out.println("maxmin" + temp2[i][0] + "+" + temp2[i][1]);
			System.out.println("minmax" + temp3[i][0] + "+" + temp3[i][1]);
			System.out.println("minmin" + temp4[i][0] + "+" + temp4[i][1]);
		}

		int[][] test = getOuterPoints(objectarray, 180);
		for (int i = 0; i < test.length; i++) {
			System.out.println(test[i][0] + "/" + test[i][1] + ";");
		}

	}

	// maxy_maxx
	public static int[][] getMax_Max(int[][] objectarray) {
		int[][] result = new int[1][2];
		int max_x = 0;
		int max_y = 0;
		for (int i = 0; i < objectarray.length; i++) {
			if (max_y == objectarray[i][1]) {
				if (objectarray[i][0] > max_x) {
					max_x = objectarray[i][0];
					result[0][0] = max_x;
					result[0][1] = max_y;
				}
			}
			if (objectarray[i][1] > max_y) {
				max_x = objectarray[i][0];
				max_y = objectarray[i][1];
				result[0][0] = max_x;
				result[0][1] = max_y;
			}
		}
		return result;
	}

	// maxy_minx
	public static int[][] getMax_Min(int[][] objectarray) {
		int[][] result = new int[1][2];
		int min_x = 9999;
		int max_y = 0;
		for (int i = 0; i < objectarray.length; i++) {
			if (max_y == objectarray[i][1]) {
				if (objectarray[i][0] < min_x) {
					min_x = objectarray[i][0];
					result[0][0] = min_x;
					result[0][1] = max_y;
				}
			}
			if (objectarray[i][1] > max_y) {
				min_x = objectarray[i][0];
				max_y = objectarray[i][1];
				result[0][0] = min_x;
				result[0][1] = max_y;
			}
		}
		return result;
	}

	// miny_maxx
	public static int[][] getMin_Max(int[][] objectarray) {
		int[][] result = new int[1][2];
		int min_y = 9999;
		int max_x = 0;
		for (int i = 0; i < objectarray.length; i++) {
			if (min_y == objectarray[i][1]) {
				if (objectarray[i][0] > max_x) {
					max_x = objectarray[i][0];
					result[0][0] = max_x;
					result[0][1] = min_y;
				}
			}
			if (objectarray[i][1] < min_y) {
				max_x = objectarray[i][0];
				min_y = objectarray[i][1];
				result[0][0] = max_x;
				result[0][1] = min_y;
			}
		}
		return result;
	}

	// miny_minx
	public static int[][] getMin_Min(int[][] objectarray) {
		int[][] result = new int[1][2];
		int min_y = 9999;
		int min_x = 9999;
		for (int i = 0; i < objectarray.length; i++) {
			if (min_y == objectarray[i][1]) {
				if (objectarray[i][0] < min_x) {
					min_x = objectarray[i][0];
					result[0][0] = min_x;
					result[0][1] = min_y;
				}
			}
			if (objectarray[i][1] < min_y) {
				min_x = objectarray[i][0];
				min_y = objectarray[i][1];
				result[0][0] = min_x;
				result[0][1] = min_y;
			}
		}
		return result;
	}

	// minx_miny
	public static int[][] getMinx_Miny(int[][] objectarray) {
		int[][] result = new int[1][2];
		int min_y = 9999;
		int min_x = 9999;
		for (int i = 0; i < objectarray.length; i++) {
			if (min_x == objectarray[i][0]) {
				if (objectarray[i][1] < min_y) {
					min_y = objectarray[i][1];
					result[0][0] = min_x;
					result[0][1] = min_y;
				}
			}
			if (objectarray[i][0] < min_x) {
				min_x = objectarray[i][0];
				min_y = objectarray[i][1];
				result[0][0] = min_x;
				result[0][1] = min_y;
			}
		}
		return result;
	}

	// minx_maxy
	public static int[][] getMinx_Maxy(int[][] objectarray) {
		int[][] result = new int[1][2];
		int max_y = 0;
		int min_x = 9999;
		for (int i = 0; i < objectarray.length; i++) {
			if (min_x == objectarray[i][0]) {
				if (objectarray[i][1] > max_y) {
					max_y = objectarray[i][1];
					result[0][0] = min_x;
					result[0][1] = max_y;
				}
			}
			if (objectarray[i][0] < min_x) {
				min_x = objectarray[i][0];
				max_y = objectarray[i][1];
				result[0][0] = min_x;
				result[0][1] = max_y;
			}
		}
		return result;
	}

	// maxx_miny
	public static int[][] getMaxx_Miny(int[][] objectarray) {
		int[][] result = new int[1][2];
		int max_x = 0;
		int min_y = 9999;
		for (int i = 0; i < objectarray.length; i++) {
			if (max_x == objectarray[i][0]) {
				if (objectarray[i][1] < min_y) {
					min_y = objectarray[i][1];
					result[0][0] = max_x;
					result[0][1] = min_y;
				}
			}
			if (objectarray[i][0] > max_x) {
				max_x = objectarray[i][0];
				min_y = objectarray[i][1];
				result[0][0] = max_x;
				result[0][1] = min_y;
			}
		}
		return result;
	}

	// maxx_maxy
	public static int[][] getMaxx_Maxy(int[][] objectarray) {
		int[][] result = new int[1][2];
		int max_x = 0;
		int max_y = 0;
		for (int i = 0; i < objectarray.length; i++) {
			if (max_x == objectarray[i][0]) {
				if (objectarray[i][1] > max_y) {
					max_y = objectarray[i][1];
					result[0][0] = max_x;
					result[0][1] = max_y;
				}
			}
			if (objectarray[i][0] > max_x) {
				max_x = objectarray[i][0];
				max_y = objectarray[i][1];
				result[0][0] = max_x;
				result[0][1] = max_y;
			}
		}
		return result;
	}

	public static int[][] getOuterPoints(int[][] objectarray, int compass_input) {
		int[][] outerPoints = new int[2][2];
		int[][] Min_Max = null;
		int[][] Max_Min = null;
		int[][] Max_Max = null;
		int[][] Min_Min = null;
		int[][] MinX_MinY = null;
		int[][] MaxX_MinY = null;
		int[][] MinX_MaxY = null;
		int[][] MaxX_MaxY = null;

		Min_Min = getMin_Min(objectarray);
		Max_Max = getMax_Max(objectarray);
		Min_Max = getMin_Max(objectarray);
		Max_Min = getMax_Min(objectarray);
		MinX_MinY = getMinx_Miny(objectarray);
		MaxX_MinY = getMaxx_Miny(objectarray);
		MinX_MaxY = getMinx_Maxy(objectarray);
		MaxX_MaxY = getMaxx_Maxy(objectarray);

		int angle = compass_input; // angleCheck(compass_input);
		// case 1 >0 to <90 degrees
		if (angle > 0 && angle < 90) {
			// first point
			System.arraycopy(Min_Max, 0, outerPoints, 0, Min_Max.length);
			System.arraycopy(Max_Min, 0, outerPoints, Min_Max.length,
					Max_Min.length);
		}
		// case 2 >90 to <180 degrees
		else if (angle > 90 && angle < 180) {
			// first point
			System.arraycopy(Max_Max, 0, outerPoints, 0, Max_Max.length);
			System.arraycopy(Min_Min, 0, outerPoints, Max_Max.length,
					Min_Min.length);
		}
		// case 3 <0 to >-90 degrees
		else if (angle < 0 && angle > (-90)) {
			// first point
			System.arraycopy(Max_Min, 0, outerPoints, 0, Max_Min.length);
			System.arraycopy(Min_Max, 0, outerPoints, Max_Min.length,
					Min_Max.length);
		}
		// case 4 <-90 to >-180 degrees
		else if (angle < (-90) && angle > (-180)) {

			System.arraycopy(Max_Max, 0, outerPoints, 0, Max_Max.length);
			System.arraycopy(Min_Min, 0, outerPoints, Max_Max.length,
					Min_Min.length);

		}
		// case 5 0 degrees
		else if (angle == 0) {
			System.arraycopy(MinX_MinY, 0, outerPoints, 0, MinX_MinY.length);
			System.arraycopy(MaxX_MinY, 0, outerPoints, MinX_MinY.length,
					MaxX_MinY.length);

		}
		// case 6 90 degrees
		else if (angle == 90) {
			System.arraycopy(Min_Min, 0, outerPoints, 0, Min_Min.length);
			System.arraycopy(Max_Min, 0, outerPoints, Min_Min.length,
					Max_Min.length);
		}
		// case 7 +-180 degrees
		else if (angle == 180 || angle == (-180)) {
			System.arraycopy(MinX_MaxY, 0, outerPoints, 0, MinX_MaxY.length);
			System.arraycopy(MaxX_MaxY, 0, outerPoints, MinX_MaxY.length,
					MaxX_MaxY.length);
		}
		// case 8 -90 degrees
		else if (angle == (-90)) {
			System.arraycopy(Min_Max, 0, outerPoints, 0, Min_Max.length);
			System.arraycopy(Max_Max, 0, outerPoints, Min_Max.length,
					Max_Max.length);
		}
		return outerPoints;
	}

	public static void getNewTarget(int[][] outerPoints) {

		try {
			int point1_x = outerPoints[0][0];
			int point1_y = outerPoints[0][1];
			int point2_x = outerPoints[1][0];
			int point2_y = outerPoints[1][1];

			newTarget1_x = (double) point1_x * 5;
			newTarget1_y = (double) point1_y * 5;

			newTarget2_x = (double) point2_x * 5;
			newTarget2_y = (double) point2_y * 5;

		} catch (Exception e) {
		}
		double hypo1 = Navigations.get_hypotenuse(Navigations.getCar_X(),
				Navigations.getCar_Y(), newTarget1_x, newTarget1_y);
		double hypo2 = Navigations.get_hypotenuse(Navigations.getCar_X(),
				Navigations.getCar_Y(), newTarget2_x, newTarget2_y);

		if (hypo1 < hypo2) {
			tempGoal_x = newTarget2_x + 5;
			tempGoal_y = newTarget2_y - 5;
		} else {
			tempGoal_x = newTarget1_x - 5;
			tempGoal_y = newTarget1_y + 5;
		}
	}
}
