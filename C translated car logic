#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <conio.h>
#include <C:\Users\Admin\Desktop\Codeblocks\Lego Praktikum\workinghead.h>

#define speed 0.3
#define safety_distance 40
#define PI 3.14159265

/**
  * This sample is about how to implement a queue in c
  *
  * Type of item is int
  * Add item to tail
  * Get item from head
  * Can get the size
  * Can display all content
  */
/**
 * The Node struct,
 * contains item and the pointer that point to next node.
 */
typedef struct Node {
    int item;
    struct Node* next;
} Node;
/**
 * The Queue struct, contains the pointers that
 * point to first node and last node, the size of the Queue,
 * and the function pointers.
 */
typedef struct Queue {
    Node* head;
    Node* tail;

    void (*push) (struct Queue*, int); // add item to tail
    // get item from head and remove it from queue
    int (*pop) (struct Queue*);
    // get item from head but keep it in queue
    int (*peek) (struct Queue*);
    // display all element in queue
    void (*display) (struct Queue*);
    // size of this queue
    int size;
} Queue;
/**
 * Push an item into queue, if this is the first item,
 * both queue->head and queue->tail will point to it,
 * otherwise the oldtail->next and tail will point to it.
 */
void push (Queue* queue, int item);
/**
 * Return and remove the first item.
 */
int pop (Queue* queue);
/**
 * Return but not remove the first item.
 */
int peek (Queue* queue);
/**
 * Show all items in queue.
 */
void display (Queue* queue);
/**
 * Create and initiate a Queue
 */
Queue createQueue ();

    double car_x = 0;
	double car_y = 0;
	double car_angle = 0;
	double car_target_x = 0;
	double car_target_y = 0;

    int occupation_list[268][2];
    double vortex_map[268][2];
    bool occupation_map[180][180];
    double scan_values[268];
    bool collision_array[180][180];
    int objectarray [10000][2];

    int * detect_collision(int source_x, int source_y, int target_x, int target_y);
    int * detect_outer_points(int * collision_point);
    void find_Contourn(int x, int y);



int main()
{


    printf("Hello world!\n");
    int i;
/*
    occupation_map[2][2] = true;
    occupation_map[1][1] = true;
    occupation_map[3][3] = true;
    occupation_map[4][4] = true;
    occupation_map[2][1] = true;
    occupation_map[1][2] = true;
    occupation_map[1][3] = true;
    occupation_map[3][1] = true;
*/



   // angleCheck(1282.73);

    for(i=0; i<=80; i++){
        scan_values[i]= i+100;
    }


    for(i; i<=267; i++){
        scan_values[i]= -1;
    }

    for(i = 0; i< 10; i++){
        scan_values[i]= 5;
    }


    mapVortex();

    fill_Map();





    int j;
    int count = 0;
        for(i=0; i<100; i++){
            for(j=0; j<100; j++){
                if(occupation_map[i][j]){
                    printf("MAP %d: (%d | %d)\n",count,i,j);
                    count++;
            }
        }
    }


    printf("\n\n--------------------------------------------------------------------------------\n\n\n\n\n\n\n\n\n");

    find_Contourn(74,91);

    intToBoolMap();

    int * collision_point;
    collision_point = detect_collision(0,0,75,95);
    int * res;
    if(collision_point != NULL){
        res = detect_outer_points(collision_point);
        printf("\n\n\n\n P  O  I  N  T  S       O N E    ( %d | %d )    T W O      ( %d | %d )",res[0],res[1],res[2],res[3]);
    }


    return 0;
}



void mapVortex(){

    int degree;
    int irDistance;
    int size = sizeof(scan_values)/sizeof(scan_values[0]);

    printf("SIZEIEHIE: %d\n\n", size);

    for(degree = 0; degree < size; degree++){
		irDistance = scan_values[degree];

        if(irDistance > -1){

            vortex_map[degree][0] = getX(degree-(size/2),irDistance,car_x);
            vortex_map[degree][1] = getY(degree-(size/2),irDistance,car_y);

        }else{
            vortex_map[degree][0] = 10001 ;
            vortex_map[degree][1] = -10001;
        }
    }
}


void fill_Map(){

    int size = sizeof(vortex_map)/sizeof(vortex_map[0]);
    int i;
    for(i = 0; i < size; i++){

        if(vortex_map[i][0] != 10001 && vortex_map[i][1] != -10001){

            int x = (int) (vortex_map[i][0]/10)+89;
            int y = (int) (vortex_map[i][1]/10)+89;

            occupation_list[i][0] = x;
            occupation_list[i][1] = y;

            occupation_map[x][y] = true;
            printf("True at %d (%d|%d)\n",i,x,y);
        }else{
            occupation_list[i][0] = 10001;
            occupation_list[i][1] = -10001;
        }
    }

    build_Obstacle(); // Important function call!
}

void build_Obstacle(){

		int counter = 0;
		bool print = true;
		int size = sizeof(occupation_list)/sizeof(occupation_list[0]);
//		printf("OOCCU SIZE = %d \n",size);

		while(counter < size-1){

			int x1 = occupation_list[counter][0];
			int y1 = occupation_list[counter][1];
            int x2 = occupation_list[counter+1][0];
            int y2 = occupation_list[counter+1][1];

            if( x2 == 10001 && y2 == -10001){
                printf("\n\n\n BREAK DETECTED \n\n\n");
                break;
            }

            if ( (get_hypotenuse(x1,y1,x2,y2)*10) <= safety_distance && (get_hypotenuse(x1,y1,x2,y2)*10) > 0 ){
                if(print){
                    //  printf("%d: (%f|%f)   %d: (%f|%f)",outer,xo,yo,inner,xi,yi);
                    help_build_Obstacle(get_angle(x1,y1,x2,y2) , get_hypotenuse(x1,y1,x2,y2) , x1 , y1 ,   print);
                }
            }
			//print = false;
			counter++;
		}

	}


void help_build_Obstacle(double angle, double distance, double x, double y,    bool print){

		if(print)
	//	printf("\nNEW CALL!\n");


		while(distance > 0){

			int xTemp = (int)getX(angle,distance,x);
			int yTemp = (int)getY(angle,distance,y);

			if(occupation_map[xTemp][yTemp] == false){
				occupation_map[xTemp][yTemp] = true;
                    if(print){
         //               printf(" SET TRUE AT: (%d|%d)     x1: %f  y1: %f \n",xTemp,yTemp,x,y);
                    }
                    if(print){
		//			    printf("Angle: %f  Hypo: %f \n",angle,distance);
                    }
				}else
					if(print)
				//	printf("NO ");



			distance = distance-0.1;
		}
}


void map_movement(double angle_N, double distance){
		/*
		   angle_N takes following values: -180 to +180, where a negative value
		   means that the car is turned towards west (left) from north, and a positive
		   value that it is turned east (right) from north.

		   distance is given in meters
		*/

		angle_N = angleCheck(angle_N);

		printf("Angle_N: %f \n",angle_N);

		double add_y = distance * round(10000 * getCosinus(angle_N)) /10000;
		double add_x = distance * round(10000 * getSinus(angle_N)) /10000;

		printf("Current x: %f + %f \n",car_x,add_x);
		printf("Current y: %f + %f \n",car_y,add_y);

		car_x = car_x + add_x;
		car_y = car_y + add_y;

		printf("New x: %f \n",car_x);
		printf("New y: %f \n",car_y);

	}



void find_Contourn(int x, int y)
{
   int currentX = x;
    int currentY = y;
    int posX;
    int posY;
    int positionOccupation = 0;
    bool checked_list[180][180];
    Queue queueX = createQueue();
    Queue queueY = createQueue();
    queueX.push(&queueX, currentX);
    queueY.push(&queueY, currentY);

    while (queueX.size!= 0)
    {
        /*
        printf("Check: [");
        printf("%d,", currentX);
        printf("%d] \n", currentY);
        */
        if (!checked_list[currentX][currentY])
        {       int i;
                //printf("has neighboors: \n");
                for ( i = 0; i < 3; ++i)
                {       int j;
                        for ( j = 0; j < 3; ++j)
                        {
                                posX = currentX-1+i;
                                posY = currentY-1+j;
                                if (posX >= 0 && posY >= 0)
                                {
                                        if (!(posX == currentX && posY == currentY))
                                        {
                                                if(occupation_map[posX][posY] && !checked_list[posX][posY])
                                                {
                                                    queueX.push(&queueX, posX);
                                                    queueY.push(&queueY, posY);
                                                    /*
                                                    printf("[");
                                                    printf("%d,",posX);
                                                    printf("%d]\n",posY);
                                                    */
                                                }
                                        }
                                }
                        }
                }
                checked_list[currentX][currentY] = true;
                objectarray[positionOccupation][0] = currentX;
                objectarray[positionOccupation][1] = currentY;
                ++positionOccupation;

        }
        queueX.pop(&queueX);
        queueY.pop(&queueY);
        /*
        printf("Remove: ");
        printf("%d, ", currentX);
        printf("%d \n", currentY);
        */
        if (queueX.size != 0)
        {
            currentX = queueX.peek(&queueX);
            currentY = queueY.peek(&queueY);
        }

        if (queueX.size == 0)
        {
            objectarray[positionOccupation][0] = 10001;
            objectarray[positionOccupation][1] = -10001;
        }
    }
}


void intToBoolMap()
{
    int i;
    int temp_x;
    int temp_y;
    int size = sizeof(collision_array)/sizeof(collision_array[0]);
    int size2 = sizeof(objectarray)/sizeof(objectarray[0]);
    printf("\n\n%d\n\n",size2);
    for(i = 0;i < size2;i++)
    {

        temp_x = objectarray[i][0];
        temp_y = objectarray[i][1];
        if(temp_x == 10001 && temp_y == -10001){
            break;
        }
        collision_array[temp_x][temp_y] = true;
        printf("true (%d|%d) \n",temp_x,temp_y);
    }

}


int * detect_collision(int source_x, int source_y, int target_x, int target_y){

			double angle = get_angle(source_x,source_y,target_x,target_y);
			printf("Angle:  %f \n",angle);
			double hypotenuse = get_hypotenuse(source_x,source_y,target_x,target_y);
			printf("Hypotenuse:  %f \n",hypotenuse);
			double increase = 0;
			int result[2];

			while(increase <= hypotenuse+0.1){

				int xTemp = (int)getY(angle,increase,source_x);
				int yTemp = (int)getX(angle,increase,source_y);
			//	printf("(%d|%d) \n",xTemp,yTemp);

				if(occupation_map[xTemp][yTemp]){
					printf("\n\nC O L L I S I O N    D E T E C T E D    A T :     X: %d   Y:  %d \n\n",xTemp,yTemp);
					result[0] = xTemp;
					result[1] = yTemp;
					return result;
				}

				increase = increase+0.1;
			}
			printf("\nDetect_Collision done.\n");
			return NULL;
}


bool detect_no_collision_bool(int source_x, int source_y, int angle){



			double hypotenuse = 100000;
			double increase = 0;

			while(increase <= hypotenuse){

				int xTemp = (int)getY(angle,increase,source_x);
				int yTemp = (int)getX(angle,increase,source_y);
			//	printf("(%d|%d) \n",xTemp,yTemp);
                if(xTemp > 179 || xTemp < 0 || yTemp > 179 || yTemp < 0){
                    printf("RETURN false\n");
                    return false;
                }

				if(collision_array[xTemp][yTemp]){

					printf("\n\nCollision  A T :     X: %d   Y:  %d \n\n",xTemp,yTemp);
					return true;
				}



				increase = increase+0.1;
			}
			printf("\nDetect_Collision done.\n");

			return false;
}



int * detect_outer_points(int * collision_point){

    int collision_x = 0;
    int collision_y = 0;
    int first_angle;
    int second_angle;

    if(collision_point != NULL){
        collision_x = collision_point[0];
        collision_y = collision_point[1];
    }
    else{
        printf("Not valid! Error at detect_outer_points()! NULL-pointer in attribute.");
        return NULL;
    }


    int angle = (int) angleCheck(get_angle(car_x,car_y,collision_x,collision_y));


    while(detect_no_collision_bool(car_x,car_y,angle)){
        angle = angle +5;
        printf("ANGLE    %d      ",angle);
    }
    while(!detect_no_collision_bool(car_x,car_y,angle)){
        angle--;
      //  printf("ANGLE    %d   ",angle);
    }
    first_angle = angleCheck(angle);


    while(detect_no_collision_bool(car_x,car_y,angle)){
        angle = angle -5;
    }
    while(!detect_no_collision_bool(car_x,car_y,angle)){
        angle++;
    }
    second_angle = angleCheck(angle);






    double hypotenuse = 1000000;
    double increase = 0;
    int result[4];

			while(increase <= hypotenuse){

				int xTemp = (int)getY(first_angle,increase,car_x);
				int yTemp = (int)getX(first_angle,increase,car_y);
			//	printf("(%d|%d) \n",xTemp,yTemp);

				if(collision_array[xTemp][yTemp]){
					printf("\n\nO U T E R    P O I N T    A T :     ( %d | %d ) \n\n",xTemp,yTemp);
					result[0] = xTemp;
					result[1] = yTemp;
					break;
				}

				increase = increase+0.1;
			}


    increase = 0;

			while(increase <= hypotenuse){

				int xTemp = (int)getY(second_angle,increase,car_x);
				int yTemp = (int)getX(second_angle,increase,car_y);
			//	printf("(%d|%d) \n",xTemp,yTemp);

				if(collision_array[xTemp][yTemp]){
					printf("\n\nO U T E R    P O I N T    A T :     ( %d | %d ) \n\n",xTemp,yTemp);
					result[2] = xTemp;
					result[3] = yTemp;
					break;
				}

				increase = increase+0.1;
			}

    return result;


  /*  int flag = -1;

    if(angle >= 0 && angle < 90){
        printf("IF, Case 1! \n(%d|%d) \n",moving_x,moving_y);
        while(moving_x<179 && moving_y<179){
            moving_x = (int)getY(angle,increase,car_x);
            moving_y = (int)getX(angle,increase,car_y);

            increase = increase + 0.1;
            if(moving_x > moving_y){
                flag = 1;
            }else{
                flag = 2;
            }
        }
        printf("(%d|%d) \n",moving_x,moving_y);
    }
    else if(angle >= 90 && angle <=180){
        while(moving_x<179 && moving_y>0){
            moving_x = (int)getY(angle,increase,car_x);
            moving_y = (int)getX(angle,increase,car_y);

            increase = increase + 0.1;
            if(moving_x > moving_y){
                flag = 3;
            }else{
                flag = 4;
            }
        }
        printf("(%d|%d) \n",moving_x,moving_y);

    }
    else if(angle < 0 && angle >= -90){
        while(moving_x>0 && moving_y>0){
            moving_x = (int)getY(angle,increase,car_x);
            moving_y = (int)getX(angle,increase,car_y);

            increase = increase + 0.1;
            if(moving_x > moving_y){
                flag = 5;
            }else{
                flag = 6;
            }
        }
        printf("(%d|%d) \n",moving_x,moving_y);

    }
    else if(angle < -90 && angle > -180){
        while(moving_x>0 && moving_y<179){
            moving_x = (int)getY(angle,increase,car_x);
            moving_y = (int)getX(angle,increase,car_y);

            increase = increase + 0.1;
            if(moving_x > moving_y){
                flag = 7;
            }else{
                flag = 8;
            }
        }
        printf("(%d|%d) \n",moving_x,moving_y);

    }
    else{
        flag = -1;
        printf("Error in detect_outer_points at else block!\n");
        return NULL;
    }

    collision_x = moving_x;
    collision_y = moving_y;

    if(flag == 1){
        while(moving_y>0){

        }
    }
    else if(flag == 2){

    }
    else if(flag == 3){

    }
    else if(flag == 4){

    }
    else if(flag == 5){

    }
    else if(flag == 6){

    }
    else if(flag == 7){

    }
    else if(flag == 8){

    }
    else{

    }
*/

}



double getX(double degree, double irDistance, double source_x){

		double x = 0;
		degree = angleCheck(degree);
		x = source_x + irDistance * round(10000 * getSinus(degree)) /10000;
		return x;

}


double getY(double degree, double irDistance, double source_y){

		double y = 0;
		degree = angleCheck(degree);
		y = source_y + irDistance * round(10000 * getCosinus(car_angle+degree)) /10000;
		return y;

}


double get_hypotenuse(double source_x, double source_y, double target_x, double target_y){

		double togo_x = target_x - source_x;
		double togo_y = target_y - source_y;

		double hypotenuse = sqrt((togo_x * togo_x) + (togo_y * togo_y));

		//printf("\n\n get_hypotenuse:  %f",hypotenuse);

		return hypotenuse;
	}


double get_angle(double source_x, double source_y, double target_x, double target_y){


		double togo_x = target_x - source_x;
		double togo_y = target_y - source_y;

		if(get_hypotenuse(source_x,source_y,target_x,target_y) == 0){
          //  printf("\n\n get_Angle:  0");
            return 0;
		}

		double angle = round((asin(togo_y/get_hypotenuse(source_x,source_y,target_x,target_y))) * 180 / PI);

		//printf("\n\n get_Angle:  %f",angle);

		if(togo_x < 0){
			if(togo_y < 0){
				angle = angle - 90;
			}
		}else{
			if(togo_y < 0){
				angle = angle + 90;
			}
		}

		return angle;
}


double angleCheck(double degree){ // Returns ANY given angle in degree between -180 and 180 (0 == North)


        int temp1 = ((int)degree) % 360;
        int temp3 = (int)degree;
        double temp2 = (degree - temp3);
        degree = temp1+temp2;


		if(degree < -180){
			degree = 360 + degree;
		}
		if(degree > 180){
			degree = -360 + degree;
		}
		return degree;
}


double getSinus(double angleInDegrees) {

        return sin(angleInDegrees * PI / 180);

}


double getCosinus(double angleInDegrees){

        return cos(angleInDegrees * PI / 180);
}




void push (Queue* queue, int item) {
    // Create a new node
    Node* n = (Node*) malloc (sizeof(Node));
    n->item = item;
    n->next = NULL;

    if (queue->head == NULL) { // no head
        queue->head = n;
    } else{
        queue->tail->next = n;
    }
    queue->tail = n;
    queue->size++;
}
/**
 * Return and remove the first item.
 */
int pop (Queue* queue) {
    // get the first item
    Node* head = queue->head;
    int item = head->item;
    // move head pointer to next node, decrease size
    queue->head = head->next;
    queue->size--;
    // free the memory of original head
    free(head);
    return item;
}
/**
 * Return but not remove the first item.
 */
int peek (Queue* queue) {
    Node* head = queue->head;
    return head->item;
}
/**
 * Show all items in queue.
 */
void display (Queue* queue) {
    printf("\nDisplay: ");
    // no item
    if (queue->size == 0)
        printf("No item in queue.\n");
    else { // has item(s)
        Node* head = queue->head;
        int i, size = queue->size;
        printf("%d item(s):\n", queue->size);
        for (i = 0; i < size; i++) {
            if (i > 0)
                printf(", ");
            printf("%d", head->item);
            head = head->next;
        }
    }
    printf("\n\n");
}
/**
 * Create and initiate a Queue
 */
Queue createQueue () {
    Queue queue;
    queue.size = 0;
    queue.head = NULL;
    queue.tail = NULL;
    queue.push = &push;
    queue.pop = &pop;
    queue.peek = &peek;
    queue.display = &display;
    return queue;
}


